trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.8'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      pip install pylint
      pip install -r requirements.txt
      mkdir reports
      ls -al
      pylint lambdafunction/covidlambda.py --exit-zero --reports=yes --output-format=msvs > tests/report.txt
  displayName: 'pylint'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      pwd
      export PYTHONPATH="$(pwd)"
      pip install pytest
      pip install pytest-lambda
      pytest tests --junitxml=reports/coverage.xml
  displayName: 'pytest'
  continueOnError: true 

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/coverage.xml'
    testRunTitle: 'Pytest'
    failTaskOnFailedTests: true
  displayName: 'Publish test results'

# - task: Python Unit Test@0
#   inputs:
#     pythonroot: 'lambdafunction'
#     coveragedir: 'coverage/htmlcov/'
#     testfilepattern: '**/*_test.py'

# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       ls -al
#       ls -al coverage/htmlcov
    
- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonarcloud-covidlambda'
    organization: 'covidlambda'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'covidlambda'
    cliProjectName: 'COVIDlambda'
    cliSources: 'lambdafunction'
    extraProperties: |
      # Additional properties that will be passed to the scanner, 
      # Put one key=value per line, example:
      # sonar.exclusions=**/*.bin
      sonar.python.coverage.reportPaths="reports/coverage.xml"

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      pip install cfn-lint
      cfn-lint -I -f parseable cloudformation/covidlambda.yml > tests/cf.txt
  displayName: 'cfnlint'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'reports/'
    artifact: 'reports'
    publishLocation: 'pipeline'
  displayName: 'Publish reports'

- task: Bash@3
  inputs:
    filePath: 'virtualenv/scripts/virtualenv.sh'
  displayName: 'Create Virtualenv'

- task: Bash@3
  inputs:
    filePath: 'virtualenv/scripts/pack.sh'
  displayName: 'Create artifact'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'artifacts'
    ArtifactName: 'covidlambda'
    publishLocation: 'Container'